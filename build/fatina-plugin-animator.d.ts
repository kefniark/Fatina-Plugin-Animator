// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../fatina

import { IPlugin } from 'fatina';
import { IControl } from 'fatina';
import { ITicker } from 'fatina';

export function get(): IPlugin;
export interface IPluginAnimator {
    animatorManager: AnimatorManager;
    tickerManager: TickerManager;
}
export class FatinaPluginAnimator implements IPlugin {
    readonly name: string;
    readonly tickerManager: any;
    readonly animatorManager: any;
    init(fatina: any): void;
}

/**
    * This manager is there to store shared animations and instantiate them
    *
    * @export
    * @class AnimatorManager
    */
export class AnimatorManager {
        readonly animations: string[];
        readonly labels: string[];
        constructor(plugin: FatinaPluginAnimator);
        /**
            * Method used to register a new animation
            *
            * @param {string} name
            * @param {(object: any, params?: any) => IControl} onCreate
            * @param {string} [tickerName]
            * @returns {AnimatorManager}
            *
            * @memberOf AnimatorManager
            */
        register(name: string, onCreate: (object: any, params?: any) => IControl, tickerName?: string): AnimatorManager;
        instantiate(name: string, object: any, params?: any): IControl;
        /**
            * Method used to add a component animator to any object
            *
            * @param {*} obj
            * @returns {Animator}
            *
            * @memberOf AnimatorManager
            */
        addAnimatorTo(obj: any): Animator;
}

/**
  * This manager is just there to keep reference to ticker by name
  *
  * @export
  * @class TickerManager
  */
export class TickerManager {
    constructor(plugin: IPluginAnimator);
    get(name: string): ITicker;
    pauseAll(name: string): void;
    resumeAll(name: string): void;
    killAll(name: string): void;
}

export interface IAnimationParams {
        group?: string;
        unstoppable?: boolean;
        finalValue?: boolean;
        next?: string;
}
/**
    * Animator component applied on a object.
    * This store a list of animations and manage them for that object
    *
    * @export
    * @class Animator
    */
export class Animator {
        animations: {
                [id: string]: IControl;
        };
        current: {
                [id: string]: IControl | undefined;
        };
        groups: string[];
        constructor(obj: any, animatorManager: AnimatorManager);
        /**
            * Add a new Animation to this object
            *
            * @param {string} name
            * @param {string} animationName
            * @param {(IAnimationParams | any)} [options]
            * @param {*} [params]
            * @returns {Animator}
            * @memberOf Animator
            */
        addAnimation(name: string, animationName: string, options?: IAnimationParams | any, params?: any): Animator;
        /**
            * Add a new Tween to this object
            *
            * @param {string} name
            * @param {(IAnimationParams | any)} options
            * @param {IControl} tween
            * @returns {Animator}
            * @memberOf Animator
            */
        addCustomAnimation(name: string, options: IAnimationParams | any, tween: IControl): Animator;
        onStartAll(name: string, cb: () => void): Animator;
        onStart(name: string, cb: () => void): Animator;
        onCompleteAll(name: string, cb: () => void): Animator;
        onComplete(name: string, cb: () => void): Animator;
        /**
            * Method used to play an animation
            *
            * @param {string} name
            * @param {() => void} [onComplete]
            * @returns {void}
            *
            * @memberOf Animator
            */
        play(name: string, onComplete?: () => void): void;
        pause(group?: string): void;
        pauseAll(): void;
        resume(group?: string): void;
        resumeAll(): void;
        stop(group?: string): void;
        stopAll(): void;
        /**
            * Used to destroy this animation and stop all the tweens
            *
            * @memberOf Animator
            */
        destroy(): void;
}

